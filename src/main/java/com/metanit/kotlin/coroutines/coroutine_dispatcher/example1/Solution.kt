package com.metanit.kotlin.coroutines.coroutine_dispatcher.example1

/**
 *      coroutineScope устанавливает для создаваемых корутин по умолчанию диспетчер типа Dispatcher.Default
 *
 *      Dispatchers.Default:
 *  Dispatchers.Default применяется по умолчанию, если тип диспетчера не указан явным образом.
 *  Этот тип использует общий пул разделяемых фоновых потоков. Он подходит для вычислений, которые не работают с операциями
 *  ввода-вывода (операциями с файлами, базами данных, сетью) и которые требуют интенсивного потребления ресурсов
 *  центрального процессора.
 *
 *      Dispatchers.IO:
 *  Dispatchers.IO использует общий пул потоков, создаваемых по мере необходимости. Он предназначен для выполнения
 *  операций ввода-вывода (например, операции с файлами или сетевыми запросами).
 *
 *      Dispatchers.Main:
 *  Dispatchers.Main применяется в графических приложениях, например, в приложениях Android или JavaFX.
 *
 *      Dispatchers.Unconfined:
 *  Dispatchers.Unconfined корутина не закреплена четко за определенным потоком или пулом потоков. Она запускается в
 *  текущем потоке до первой приостановки. После возобновления работы корутина продолжает работу в одном из потоков,
 *  который строго не фиксирован. Подобный тип подходит для корутин, которым не требуется интенсивно потреблять время CPU
 *  или работать с общими данными, наподобие объектов пользовательского интерфейса.
 *  Разработчики языка Kotlin в обычной ситуации не рекомендуют использовать данный тип.
 *
 *      newSingleThreadContext и newFixedThreadPoolContext:
 *  newSingleThreadContext и newFixedThreadPoolContext позволяют вручную задать поток/пул для выполнения корутины.
 */

import kotlinx.coroutines.*

suspend fun main() = coroutineScope {
    launch {
        println("Корутина выполняется в потоке: ${Thread.currentThread().name}")
    }
    println("Функция выполняется в потоке: ${Thread.currentThread().name}")
}

//  Функция выполняется в потоке: main
//  Корутина выполняется в потоке: DefaultDispatcher-worker-1